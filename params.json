{"name":"Cassanity","tagline":"CASSANITY NOW!","body":"# Cassanity\r\n\r\nLayer of goodness on top of cassandra-cql so you do not have to write CQL strings all over the place.\r\n\r\n## Note about Cassandra 1.2\r\n\r\nAt this time, cassandra 1.2 is not supported. Under the hood, cassanity uses [cassandra-cql](https://github.com/kreynolds/cassandra-cql), which does not currently support 1.2. It needs the thrift bindings ([initial pull request](https://github.com/kreynolds/cassandra-cql/pull/39)) updated for 1.2 or to wrap the new binary protocol ([initial pull request](https://github.com/kreynolds/cassandra-cql/pull/40)). I'm hoping to work on this in February or March, but if you want to take a stab, that would be awesome.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'cassanity'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install cassanity\r\n\r\n## Usage\r\n\r\n```ruby\r\nrequire 'cassanity'\r\n\r\n# client does the heavy lifting of setting up a cassandra cql database instance,\r\n# a cassanity executor for that database, and a cassanity connection\r\nclient = Cassanity::Client.new\r\n\r\n# get keyspace instance\r\nkeyspace = client[:my_app]\r\n\r\n# tell client to use keyspace for future queries\r\n# this is optional as cassanity always sends the keyspace and column family name\r\n# whenever they are needed\r\nkeyspace.use\r\n\r\n# schema for apps column family\r\napps_schema = Cassanity::Schema.new({\r\n  primary_key: :id,\r\n  columns: {\r\n    id: :text,\r\n    name: :text,\r\n    created_at: :timestamp,\r\n  },\r\n  with: {\r\n    comment: 'For storing apps',\r\n  }\r\n})\r\n\r\n# get instance of column family with name and schema set\r\napps = keyspace.column_family({\r\n  name: :apps,\r\n  schema: apps_schema,\r\n})\r\n\r\n# you can also just pass a hash for the schema\r\napps = keyspace.column_family({\r\n  name: :apps,\r\n  schema: {\r\n    primary_key: :id,\r\n    columns: {\r\n      id: :text,\r\n      name: :text,\r\n      created_at: :timestamp,\r\n    },\r\n    with: {\r\n      comment: 'For storing apps',\r\n    }\r\n  },\r\n})\r\n\r\n# create column family based on name and schema\r\napps.create\r\n\r\n# insert row\r\napps.insert(data: {\r\n  id: '1',\r\n  name: 'GitHub.com',\r\n  created_at: Time.now,\r\n})\r\n\r\n# update name for row\r\napps.update(set: {name: 'GitHub'}, where: {id: '1'})\r\n\r\n# delete row\r\napps.delete(where: {id: '1'})\r\n\r\n# truncate column family (remove all rows, still can add new stuff)\r\napps.truncate\r\n\r\n# drop column family (no more inserting into it, it is gone)\r\napps.drop\r\n```\r\n\r\nYou can also do a lot more. Here are a few more [examples](https://github.com/jnunemaker/cassanity/tree/master/examples):\r\n\r\n* [Batch Operations](https://github.com/jnunemaker/cassanity/tree/master/examples/batch.rb)\r\n* [Counters](https://github.com/jnunemaker/cassanity/tree/master/examples/counters.rb)\r\n* [Keyspaces](https://github.com/jnunemaker/cassanity/tree/master/examples/keyspaces.rb)\r\n* [Column Families](https://github.com/jnunemaker/cassanity/tree/master/examples/column_families.rb)\r\n* [Select a Range](https://github.com/jnunemaker/cassanity/tree/master/examples/select_range.rb)\r\n\r\n## More Reading\r\n\r\n* [Instrumentation](https://github.com/jnunemaker/cassanity/tree/master/doc/Instrumentation.md)\r\n* [Migrations](https://github.com/jnunemaker/cassanity/tree/master/doc/Migrations.md)\r\n\r\n## Compatibility\r\n\r\n* Ruby 1.9.3\r\n* Cassandra CQL 3.x\r\n* Any version of cassandra that works with cassandra-cql and supports CQL 3.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}